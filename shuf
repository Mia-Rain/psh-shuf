#!/bin/sh
nl='
'
IFS=""
# this algorithm is 100% hand made
###
# set $RPATH to use custom path for psh-prng
# set $MPATH to use custom path for psh-fractional
gran() {                              
  ran="$(${RPATH:-$PWD/ran/ran} $2)"
  # recent changes to psh-prng allow for range calculations
  mul="$(($1-1))"
  range="$(${MPATH:-$PWD/math/multiplication/mul} $mul $ran)"
  r1="$((1+ ${range%.*} ))"; range="${r1}.${range#*.}"
  echo "${range%.*}"
}
countL() {
  n=0; while read -r p || [ "$p" ]; do
    : $((n+=1))
  done
  echo "$n"
}
shcat() {
  while IFS= read -r p || [ "$p" ]; do
    printf '%s' "$p$nl"
  done
}
case "$1" in
  "") in="$(shcat <&0)";;
  *) in="$(shcat <"$1")"
esac
s() {
  n=1; while [ "$n" -le "${1}" ]; do
    echo "$n"; : $((n+=1))
  done
}
lines=$(echo "$in" | countL) 
# pull stdin/file into $in for later user
ran=$(gran "$lines")
ln=0
unset IFS; for i in $(s $lines); do
  pn=0; n=1; while IFS= read -r p || [ "$p" ]; do
    : $((pn+=1)) 
    [ "$n" -eq "$ran" ] && {
      out="${out+$out$nl}$p"; ran=$(gran "$lines")
      unset ein; ln=0; while IFS= read -r l || [ "$l" ]; do
        : $((ln+=1))
        [ "$ln" -ne "$pn" ] && ein="${ein+$ein$nl}$l"
      done << EOF
$in
EOF
      in="$ein"; lines=$(echo "$in" | countL)
      break # $in has been redefined # lines needs to be reset
    }
    : $((n+=1))
  done << EOF
$in
EOF
done
echo "$out"
