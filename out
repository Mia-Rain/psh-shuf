#!/bin/sh# this algorithm is 100% hand made#### set $RPATH to use custom path for psh-prng# set $MPATH to use custom path for psh-fractionalgran() {ran="$(${RPATH:-$PWD/ran/ran} $2)"# recent changes to psh-prng allow for range calculationsmul="$(($1-1))"range="$(${MPATH:-$PWD/math/multiplication/mul} $mul $ran)"r1="$((1+${range%.*}))"; range="${r1}.${range#*.}"echo "${range%.*}"}countL() {n=0; while read -r p || [ "$p" ]; do: $((n+=1))doneecho "$n"}shcat() {while read -r p || [ "$p" ]; doprintf '%s' "$p$nl"done}case "$1" in"") in="$(shcat <&0)";;*) in="$(shcat <$1)"esacs() {n=1; while [ "$n" -le ${1} ]; doecho "$n"; : $((n+=1))done}nl=''# pull stdin/file into $in for later userIFS=""; unset out; lines=$(echo $in | countL)[ "${#lines}" -gt 8 ] && {printf 'files that large cannot be supported...
'exit 1# 999999999*999999999 < (2^63)-1# 9999999999*9999999999 > (2^63)-1# (2^63)-1 is the limit for dash}ran=$(gran "$lines")unset IFS; for i in $(s $lines); dopn=0; n=1; while read -r p || [ "$p" ]; do: $((pn+=1))[ "$n" -eq "$ran" ] && {out="${out+$out$nl}$p"; ran=$(gran "$lines")unset einln=0; while read -r l || [ "$l" ]; do: $((ln+=1))[ "$ln" -ne "$pn" ] && ein="${ein+$ein$nl}$l"done << EOF$(echo "$in")EOFin="$ein"; lines=$(echo "$in" | countL); echo "$p"break # $in has been redefined}: $((n+=1))done << EOF$(echo "$in")EOFdone
